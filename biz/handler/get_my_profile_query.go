// Code generated by hertz generator.

package handler

import (
	"context"
	"time"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	aic_api "gitlab.com/aic/aic_api/biz/model/aic_api"
	"gitlab.com/aic/aic_api/biz/model/github.com/aic/http_idl_gen/gen/aic/data/models"
	get_my_profile_query "gitlab.com/aic/aic_api/biz/service/profile_get_my_profile_query"
	ue "gitlab.com/aic/aic_api/biz/util/errors"
	"gitlab.com/aic/aic_api/cache"
	cacheHelper "gitlab.com/aic/aic_api/cache/helpers"
	"gitlab.com/aic/aic_api/logs"
)

var (
	getMyProfileQueryService     get_my_profile_query.GetMyProfileQueryService
	invalidatingGetMyProfileFunc = "GetMyProfileQuery.GetData"
)

func init() {
	getMyProfileQueryService = get_my_profile_query.NewGetMyProfileQueryService()
}

// GetMyProfileQuery .
// @router /api/v:version/cof/profile/me [POST]
func GetMyProfileQuery(ctx context.Context, c *app.RequestContext) {
	var err error
	var req aic_api.GetMyProfileRequest
	err = c.BindAndValidate(&req)

	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := GetMyProfileResp(ctx, req.GetRequest())

	c.JSON(consts.StatusOK, resp)
}

func GetMyProfileResp(ctx context.Context, params *models.GetMyProfileRequestParams) *aic_api.GetMyProfileResponse {
	if err := getMyProfileQueryService.Validate(ctx, params); err != nil {
		logs.CtxError(ctx, "params:[%v] msg:[%s]", params, "failed to validate get my profile")
		return newGetMyProfileResp(nil, err)
	}

	respData, err := cache.ServiceCallWithCacheKey(getMyProfileQueryService.GetData, params, ctx, cacheHelper.GenerateCacheKey(invalidatingGetMyProfileFunc, params.ProfileHeader, cache.Env), time.Hour, time.Hour)
	if err != nil {
		logs.CtxError(ctx, "params:[%v] msg:[%s]", params, "failed to get my profile")
		return newGetMyProfileResp(nil, err)
	}
	return newGetMyProfileResp(respData, nil)
}

func newGetMyProfileResp(data *models.GetMyProfileResponseData, err error) *aic_api.GetMyProfileResponse {
	status := ue.GetStatus(err)
	if ue.Failed(status) {
		return &aic_api.GetMyProfileResponse{
			Code:    status.Code(),
			Message: status.Msg(),
		}
	}

	return &aic_api.GetMyProfileResponse{
		Code:    status.Code(),
		Message: status.Msg(),
		Data:    data,
	}
}
