// Code generated by hertz generator.

package handler

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	aic_api "gitlab.com/aic/aic_api/biz/model/aic_api"
	"gitlab.com/aic/aic_api/biz/model/github.com/aic/http_idl_gen/gen/aic/data/models"
	auth_sign_in_query "gitlab.com/aic/aic_api/biz/service/auth_sign_in_query"
	ue "gitlab.com/aic/aic_api/biz/util/errors"
	"gitlab.com/aic/aic_api/logs"
)

var (
	signInQueryService auth_sign_in_query.SignInQueryService
)

func init() {
	signInQueryService = auth_sign_in_query.NewSignInQueryService()
}

// SignInQuery .
// @router /api/v:version/cof/auth/signin [POST]
func SignInQuery(ctx context.Context, c *app.RequestContext) {
	var err error
	var req aic_api.SignInRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := SignInResp(ctx, req.GetRequest())

	c.JSON(consts.StatusOK, resp)
}
func SignInResp(ctx context.Context, params *models.SignInRequestParams) *aic_api.SignInResponse {
	respData, err := signInQueryService.GetData(ctx, params)
	if err != nil {
		logs.CtxError(ctx, "params:[%v] msg:[%s]", params, "failed to sign in")
		return newSignInResp(nil, err)
	}
	logs.CtxInfo(ctx, "Successfully signed in: respData: %v", respData)
	return newSignInResp(respData, nil)
}

func newSignInResp(data *models.SignInResponseData, err error) *aic_api.SignInResponse {
	status := ue.GetStatus(err)
	if ue.Failed(status) {
		return &aic_api.SignInResponse{
			Code:    status.Code(),
			Message: status.Msg(),
		}
	}

	return &aic_api.SignInResponse{
		Code:    status.Code(),
		Message: status.Msg(),
		Data:    data,
	}
}
