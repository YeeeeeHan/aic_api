// Code generated by hertz generator.

package handler

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	aic_api "gitlab.com/aic/aic_api/biz/model/aic_api"
	"gitlab.com/aic/aic_api/biz/model/github.com/aic/http_idl_gen/gen/aic/data/models"
	auth_sign_out_query "gitlab.com/aic/aic_api/biz/service/auth_sign_out_query"
	ue "gitlab.com/aic/aic_api/biz/util/errors"
	"gitlab.com/aic/aic_api/logs"
)

var (
	signOutQueryService auth_sign_out_query.SignOutQueryService
)

func init() {
	signOutQueryService = auth_sign_out_query.NewSignOutQueryService()
}

// SignOutQuery .
// @router /api/v:version/cof/auth/signout [POST]
func SignOutQuery(ctx context.Context, c *app.RequestContext) {
	var err error
	var req aic_api.SignOutRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := SignOutResp(ctx, req.GetRequest())

	c.JSON(consts.StatusOK, resp)
}

func SignOutResp(ctx context.Context, params *models.SignOutRequestParams) *aic_api.SignOutResponse {
	if err := signOutQueryService.Validate(ctx, params); err != nil {
		logs.CtxError(ctx, "params:[%v] msg:[%s]", params, "failed to validate sign out")
		return newSignOutResp(nil, err)
	}
	respData, err := signOutQueryService.GetData(ctx, params)
	if err != nil {
		logs.CtxError(ctx, "params:[%v] msg:[%s]", params, "failed to sign out")
		return newSignOutResp(nil, err)
	}
	return newSignOutResp(respData, nil)
}

func newSignOutResp(data *models.SignOutResponseData, err error) *aic_api.SignOutResponse {
	status := ue.GetStatus(err)
	if ue.Failed(status) {
		return &aic_api.SignOutResponse{
			Code:    status.Code(),
			Message: status.Msg(),
		}
	}

	return &aic_api.SignOutResponse{
		Code:    status.Code(),
		Message: status.Msg(),
		Data:    data,
	}
}
